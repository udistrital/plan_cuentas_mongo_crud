workspace:
  base: /go
  path: src/github.com/udistrital/${DRONE_REPO##udistrital/}
  when:
    branch:
    - develop
    - release/*
    - master

kind: pipeline
name: oas_api_ci

steps:
- name: check_readme
  image: jjvargass/qa_develoment:latest
  commands:
  - python /app/check_readme.py
  when:
    branch:
    - develop
    - feature/*
    - release/*
    event:
    - push

- name: check_branch
  image: jjvargass/qa_develoment:latest
  commands:
  - python /app/check_branch.py -H ${DRONE_GIT_HTTP_URL}
  when:
    branch:
    - develop
    - feature/*
    - release/*
    event:
    - push

- name: check_commits
  image: jjvargass/qa_develoment:latest
  commands:
  - python /app/check_commits.py
  when:
    branch:
    - develop
    - feature/*
    - release/*
    event:
    - push

- name: go_build
  image: golang:1.14
  commands:
  - go get -t
  - GOOS=linux GOARCH=amd64 go build -o main
  when:
    branch:
    - develop
    - release/*
    - master
    event:
    - push

- name: go_run_test
  image: golang:1.14
  commands:
  - go get -t
  - go get github.com/smartystreets/goconvey/convey
  - go get -u gopkg.in/alecthomas/gometalinter.v1
  - gometalinter.v1 --install
  - go get github.com/axw/gocov/...
  - go get github.com/AlekSi/gocov-xml
  - go get -u github.com/jstemmer/go-junit-report
  - gometalinter.v1 ./... --checkstyle | tee report.xml
  # - gocov test ./... | gocov-xml > coverage.xml
  # - go test -v ./... | go-junit-report > test.xml
  when:
    branch:
    - develop
    - release/*
    - master
    event:
    - push

- name: run_sonar_scanner
  image: openjdk:8-alpine
  commands:
  - export RELEASE=4.2.0.1873
  - apk add --no-cache  curl grep sed unzip nodejs npm
  - curl --insecure -o ./sonarscanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$RELEASE-linux.zip
  - unzip sonarscanner.zip
  - rm sonarscanner.zip
  - rm -rf sonar-scanner-$RELEASE-linux/jre
  - sed -i 's/use_embedded_jre=true/use_embedded_jre=false/g' ./sonar-scanner-$RELEASE-linux/bin/sonar-scanner
  - export PATH=$PATH:/go/src/github.com/udistrital/${DRONE_REPO##udistrital/}/sonar-scanner-$RELEASE-linux/bin
  - sonar-scanner -Dsonar.projectKey=${DRONE_REPO_NAME} -Dsonar.projectName=${DRONE_REPO_NAME} -Dsonar.projectVersion=1.0
    \-Dsonar.sourceEncoding=UTF-8
    # GoLint report path, default value is report.xml
    \-Dsonar.golint.reportPath=report.xml
    # Cobertura like coverage report path, default value is coverage.xml
    #\-Dsonar.coverage.reportPath=coverage.xml
    # if you want disabled the DTD verification for a proxy problem for example, true by default
    \-Dsonar.coverage.dtdVerification=false
    # JUnit like test report, default value is test.xml
    #\-Dsonar.test.reportPath=test.xml
    \-Dsonar.language=go
    \-Dsonar.exclusions=swagger/**,routers/**,database/**
    \-Dsonar.sources=./
    \-Dsonar.sources.inclusions=**/**.go
    #\-Dsonar.tests=./tests/
    #\-Dsonar.test.inclusions=**/**_test.go
    #\-Dsonar.test.exclusions=database/**
    \-Dsonar.host.url=https://sonarqube.portaloas.udistrital.edu.co/
  when:
    branch:
    - develop
    - release/*
    - master
    event:
    - push

- name: publish_dockerhub
  image: plugins/docker
  settings:
    username:
      from_secret: DOCKER_USERNAME
    password:
      from_secret: DOCKER_PASSWORD
    repo: oas0/${DRONE_REPO##udistrital/}
    tags:
      - ${DRONE_COMMIT:0:7}
      - latest
  when:
    branch:
    - release/*
    - master

- name: go-awsecs
  image: golang:1.9
  environment:
    AWS_ACCESS_KEY_ID:
      from_secret: AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY:
      from_secret: AWS_SECRET_ACCESS_KEY
  commands:
   - case ${DRONE_BRANCH} in
        test)
          AMBIENTE=test
          CLUSTER=test
          ;;
        master)
          AMBIENTE=prod
          CLUSTER=oas
          ;;
     esac
   - AWS_REGION=us-east-1
   - SERVICE=${DRONE_REPO##udistrital/}_$AMBIENTE
   - MYCONTAINER=oas0/${DRONE_REPO##udistrital/}:${DRONE_COMMIT:0:7}
   - container_name=${DRONE_REPO##udistrital/}
   - apt-get update
   - apt-get install unzip
   - wget https://github.com/Autodesk/go-awsecs/releases/download/v1.1/update-aws-ecs-service-linux-amd64.zip
   - unzip update-aws-ecs-service-linux-amd64.zip -d /go/bin
   - AWS_ACCESS_KEY_ID=$${AWS_ACCESS_KEY_ID} AWS_SECRET_ACCESS_KEY=$${AWS_SECRET_ACCESS_KEY} AWS_REGION=$AWS_REGION
     $GOPATH/bin/update-aws-ecs-service -cluster $CLUSTER -service $SERVICE -container-image $container_name=$MYCONTAINER
  when:
    branch:
    - release/*
    - master
    event:
    - push

- name: notify_telegram
  image: appleboy/drone-telegram
  settings:
    token:
      from_secret: telegram_token
    to:
      from_secret: telegram_to
    format: html
    message: >
      {{#success build.status}}
        ✅ <a href="{{build.link}}">SUCCESS</a> <b>Build #{{build.number}}</b> (type: <code>{{ build.event }}</code>)
        <b>Repo:</b><code>{{repo.name}}</code> <b>Branch:</b><code>{{commit.branch}}</code>
        <b>Commit:</b> <a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
        <b>Autor:</b>{{commit.author}} <code>&#128526 </code>
      {{else}}
        ❌ <a href="{{build.link}}">FAILURE</a> <b>Build #{{build.number}}</b> (type: <code>{{ build.event }}</code>)
        <b>Repo:</b><code>{{repo.name}}</code> <b>Branch:</b> <code>{{commit.branch}}</code>
        <b>Commit:</b> <a href="{{commit.link}}">{{truncate commit.sha 7}}</a>
        <b>Autor:</b>{{commit.author}} <code>&#128549 </code>
      {{/success}}
  when:
    branch:
    - develop
    - release/*
    - master
    event:
    - push
    status:
    - failure
    - success
